class Solution {
    int count=0;
    public int totalNQueens(int n) {
     List<List<String>> reslist=new ArrayList<>();
     char board[][]=new char[n][n];
     for(int i=0;i<n;i++)
     {
        for(int j=0;j<n;j++)
        {
            board[i][j]='.';
        }
     }
     nQueens(board,0,reslist,n);
     return count;
    }
    public void nQueens(char board[][],int row,List<List<String>> reslist,int n)
    {
        if(row==board.length)
        {
           count++;
           return;
        }
        for(int j=0;j<board.length;j++)
        {
            if(isSafe(board,row,j,n))
            {
                board[row][j]='Q';
                nQueens(board,row+1,reslist,n);
                board[row][j]='.';
            }
        }
    }
    public boolean isSafe(char board[][],int row,int col,int n)
    {
        //horizontal check
        for(int i=0;i<n;i++)
        {
            if(board[row][i]=='Q')
            {
                return false;
            }
        }
        //vertical check
        for(int i=0;i<n;i++)
        {
            if(board[i][col]=='Q')
            {
                return false;
            }
        }
        //left diagonal
        for(int i=row,j=col;i>=0 && j>=0;i--,j--)
        {
            if(board[i][j]=='Q')
            {
                return false;
            }
        }
        //right diagonal
        for(int i=row,j=col;i>=0 && j<n;i--,j++)
        {
            if(board[i][j]=='Q')
            {
                return false;
            }
        }
        return true;
    }
}
