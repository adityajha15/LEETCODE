class Solution {
    public int minCostClimbingStairs(int[] cost) {
        //top-down approach
        int n=cost.length;
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        return recur(dp,cost,n);
    }
    public int recur(int dp[],int cost[],int n)
    {
        if(n==0 || n==1)
        {
            dp[n]=0;
            return 0;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        int oneStep=cost[n-1]+recur(dp,cost,n-1);
        int twoStep=cost[n-2]+recur(dp,cost,n-2);
        dp[n]=Math.min(oneStep,twoStep);
        return dp[n];
    }
}

//bottom up approach  tabulation
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        //tabulation
        int n=cost.length;
        int dp[]=new int[n+1];
        dp[0]=0;
        dp[1]=0;
        for(int i=2;i<=n;i++)
        {
            int oneStep=cost[i-1]+dp[i-1];
            int twoStep=cost[i-2]+dp[i-2];
            dp[i]=Math.min(oneStep,twoStep);
        }
        return dp[n];
    }
}
