//top-down approach

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n=coins.length;
        int dp[][]=new int[n][amount+1];
        for(int i=0;i<n;i++)
        {
            Arrays.fill(dp[i],-1);
        }
        int res=recur(coins,amount,n-1,dp);
        if(res==(int)(1e9))
        {
            return -1;
        }
        return res;
    }
    public int recur(int coins[],int amount,int idx,int dp[][])
    {
        //base case
        if(idx==0)
        {
            if(amount%coins[idx]==0)
            {
                dp[idx][amount]=amount/coins[idx];
                return amount/coins[idx];
            }
            dp[idx][amount]=(int)(1e9);
            return (int)(1e9);
        }
        if(dp[idx][amount]!=-1)
        {
            return dp[idx][amount];
        }
        int pick=(int)(1e9);
        if(amount>=coins[idx])
        {
            pick=1+recur(coins,amount-coins[idx],idx,dp);
        }
        int nopick=0+recur(coins,amount,idx-1,dp);
        dp[idx][amount]=Math.min(pick,nopick);
        return dp[idx][amount];
    }
}

//bottom-up tabulation method

class Solution {
    public int coinChange(int[] coins, int amount) {
       int n=coins.length;
       int dp[][]=new int[n][amount+1];
       for(int a=0;a<=amount;a++)
       {
        if(a%coins[0]==0)
        {
            dp[0][a]=a/coins[0];
        }
        else
        {
            dp[0][a]=(int)(1e9);
        }
       }
       for(int i=1;i<n;i++)
       {
        for(int a=0;a<=amount;a++)
        {
            int pick=(int)(1e9);
            if(a>=coins[i])
            {
                pick=1+dp[i][a-coins[i]];
            }
            int nopick=0+dp[i-1][a];
            dp[i][a]=Math.min(pick,nopick);
        }
       }
       if(dp[n-1][amount]==(int)(1e9))
       {
        return -1;
       }
       return dp[n-1][amount];
    }
}
