//Brute-force approach
//linear search
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n=nums.length;
        for(int i=0;i<n-1;i+=2)
        {
            if(nums[i]!=nums[i+1])
            {
                return nums[i];
            }
        }
        return nums[n-1];
    }
}
//optimized approach
//binary search
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n=nums.length;
       if(nums.length==1)
       {
        return nums[0];
       }
       int start=0,end=nums.length-1;
       while(start<=end)
       {
        int mid=start+(end-start)/2;
        //Handling edge cases
        if(mid==0 && nums[0]!=nums[1])
        {
            return nums[0];
        }
        if(mid==n-1 && nums[n-2]!=nums[n-1])
        {
            return nums[n-1];
        }
        if(nums[mid-1]!=nums[mid] && nums[mid]!=nums[mid+1])
        {
            return nums[mid];
        }
        if(mid%2==0)
        {
            if(nums[mid]==nums[mid-1])
            {
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
        }
        else
        {
            if(nums[mid]==nums[mid-1])
            {
                start=mid+1;
            }
            else
            {
                end=mid-1;
            }
        }
       }
       return -1;
    }
}
