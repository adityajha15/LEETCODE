import java.util.Scanner;

class bbsstt
{
	Scanner sc=new Scanner(System.in);
	class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
			this.left=null;
			this.right=null;
		}
	}
	TreeNode root;
	public void insertNode() 
	{
		System.out.println("enter the data:");
		int data=sc.nextInt();
		TreeNode newnode=new TreeNode(data);
		if(root==null)
		{
			root=newnode;
		}
		else
		{
			recur(root,newnode);
		}
	}
	public void recur(TreeNode current,TreeNode newnode)
	{
		if(newnode.data<current.data)
		{
			if(current.left==null)
			{
				current.left=newnode;
			}
			else
			{
				recur(current.left,newnode);
			}
		}
		else
		{
			if(current.right==null)
			{
				current.right=newnode;
			}
			else
			{
				recur(current.right,newnode);
			}
		}
	}
	public void search(int data)
	{
		if(root==null)
		{
			System.out.println("Tree is Empty");
		}
		else
		{
			searchrecur(root,data);
		}
	}
	public void searchrecur(TreeNode current,int data)
	{
		if(current.data==data)
		{
			System.out.println("Data exist!");
		}
		else if(data<current.data)
		{
			if(current.left==null)
			{
				System.out.println("data does not exist!");
			}
			else
			{
				searchrecur(current.left,data);
			}
		}
		else
		{
			if(current.right==null)
			{
				System.out.println("data does not exist!");
			}
			else
			{
				searchrecur(current.right,data);
			}
		}
	}
	public void inOrder(TreeNode node)
	{
		if(node!=null)
		{
			inOrder(node.left);
			System.out.print(node.data+" ");
			inOrder(node.right);
		}
	}
	public void preOrder(TreeNode node)
	{
		if(node!=null)
		{
			System.out.print(node.data+" ");
			inOrder(node.left);
			inOrder(node.right);
		}
	}
	public void postOrder(TreeNode node)
	{
		if(node!=null)
		{
			inOrder(node.left);
			inOrder(node.right);
			System.out.print(node.data+" ");
		}
	}
}
public class BST_Traversal {
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the size of tree:");
		int n=sc.nextInt();
		bbsstt b=new bbsstt();
		for(int i=0;i<n;i++)
		{
			b.insertNode();
		}
		b.inOrder(b.root);
		System.out.println();
		b.search(25);
		b.preOrder(b.root);
		System.out.println();
		b.postOrder(b.root);
		System.out.println();
		sc.close();
	}
}
