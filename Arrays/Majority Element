class Solution {
    public int majorityElement(int[] nums) {
      //brute force approach
      for(int val:nums)
      {
        int count=0;
        for(int i:nums)
        {
            if(i==val)
            {
                count++;
            }
        }
        if(count>nums.length/2)
        {
            return val;
        }
      }
      return 0;
    }
}
//brute force optimized approach
class Solution {
    public int majorityElement(int[] nums) {
      //brute force optimized approach
      if(nums.length==1)
      {
        return nums[0];
      }
      Arrays.sort(nums);
      int count=1,ans=nums[0];
      for(int i=1;i<nums.length;i++)
      {
        if(nums[i]==nums[i-1])
        {
            count++;
        }
        else
        {
            count=1;
            ans=nums[i];
        }
        if(count>nums.length/2)
        {
            return ans;
        }
      }
      return 0;
    }
}
Moore's algorithm
class Solution {
    public int majorityElement(int[] nums) {
     //Moore's algorithm
     int freq=0,ans=0;
     for(int i=0;i<nums.length;i++)
     {
        if(freq==0)
        {
            ans=nums[i];
        }
        if(ans==nums[i])
        {
            freq++;
        }
        else
        {
            freq--;
        }
     }
     return ans;
    }
}
